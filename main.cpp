#line 1 "main.cpp"

#line 3 "main.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 13
#define YY_END_OF_BUFFER 14
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[505] =
    {   0,
        0,    0,    0,    0,   14,   12,    4,    3,    2,    2,
        9,   12,   12,    9,    9,   12,   10,    9,    9,    9,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        6,    8,    4,    3,    2,    2,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    6,    7,    0,
       10,    0,    6,    0,   10,    9,    0,   10,    0,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    5,

        5,    5,    5,    5,    5,    5,    5,    1,    5,    1,
        5,    5,    5,    5,    5,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    8,    8,    8,    8,    6,    7,
        8,    8,    8,    8,    8,    8,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    5,    1,    5,    5,    5,
        5,    5,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,   11,   10,   10,    0,   10,    1,    5,    5,    5,

        5,    5,    5,    1,    5,    5,    1,    5,    5,    5,
        1,    5,    5,    5,    5,    5,    5,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    1,    5,    5,    5,
        5,    5,    5,    5,    1,    5,    5,    5,    5,    8,
        8,    8,    8,    8,    1,    5,    5,    5,    5,    5,
        5,    1,    5,    5,    1,    5,    5,    5,    1,    5,
        5,    5,    5,    5,    5,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    1,    5,    5,    5,    5,    5,
        5,    5,    1,    5,    5,    5,    5,   10,    5,    5,
        5,    1,    1,    5,    5,    1,    5,    5,    1,    5,

        5,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    5,    5,    5,    1,    1,    1,    1,    5,
        1,    5,    1,    1,    5,    8,    5,    5,    5,    1,
        1,    5,    5,    1,    5,    5,    1,    5,    5,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        5,    5,    5,    1,    1,    1,    1,    5,    1,    5,
        1,    1,    5,    1,    1,    5,    1,    5,    5,    1,
        5,    5,    5,    5,    5,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    1,    1,    1,    1,
        5,    1,    5,    5,    1,    5,    5,    5,    5,    5,

        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    5,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    5,    5,    1,    1,    1,    1,
        5,    5,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    5,    5,    1,    1,    1,    1,    5,    1,
        5,    1,    5,    5,    1,    5,    1,    5,    5,    1,
        1,    1,    5,    1,    5,    5,    1,    5,    1,    5,
        5,    1,    1,    1,    1,    5,    5,    5,    5,    1,
        1,    5,    5,    5,    5,    5,    1,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,

        5,    1,    1,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    7,    1,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
       48,    1,   49,   50,    1,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   33,   60,   61,   62,   63,
       64,   65,   33,   66,   67,   68,   69,   70,   71,   72,
       73,   33,   74,    1,   75,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    4,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    7
    } ;

static const flex_int16_t yy_base[514] =
    {   0,
        0,    0,   75,    0,  464, 2065, 2065, 2065, 2065,    0,
     2065,    0,    0,  436,  144,  429,  135,  415,  132,  407,
      118,  128,  136,  127,  134,  161,  124,    0,  172,  151,
      132,  173,  184,  193,  148,  194,  207,  190,  190,  229,
     2065,    0,    0,    0,    0,  167,    0,  279,  171,  412,
      402,  161,  314,  261,  307,  197,  306,  336,  246,  387,
      260,  380,  430,  376,  254,  393,  397,  434,  445,  450,
      451,  475,  482,  489,  491,  509,  533,    0, 2065,  317,
        0,  313, 2065,    0,  193, 2065,  297,  452,  258,    0,
      189,  189,  209,  213,  215,  234,  239,  255,  386,  391,

      236,  453,  490,  500,  500,  505,  501,    0,  517,  517,
      453,  526,  540,  539,  534,    0,    0,  546,  552,  542,
      562,  539,  543,  556,    0,  547,  554,  566,  559,  555,
      571,  568,  572,  585,    0,  193,  628,  411,    0,    0,
      668,  615,    0,  294,  623,  301,  583,  610,  602,  669,
      623,  664,  651,  637,  671,  673,  688,  706,  705,  713,
      721,  712,  722,  749,  727,  755,  759,  779,  740,  770,
      774,  786,  792,  801,  813,  820,  825,  856,  835,  847,
      857,  862,  868,  877,  904,  890,  889,  917,  922,  895,
      928, 2065,  264,  607,  262,  206,    0,  607,  706,  587,

      753,  593,  600,    0,  703,  806,    0,  811,  716,  815,
      785,  821,  840,  889,  878,  911,  917,    0,    0,    0,
      920,  917,  943,  944,  940,  953,    0,  950,  947,  958,
      961,  950,  961,  954,    0,  962,  968,  974,  961,    0,
      190, 1008,  165,  160,  975,  982,  995, 1007, 1009,  977,
     1015,  994, 1013, 1034, 1029, 1056, 1050, 1066, 1062, 1078,
     1072, 1102, 1106, 1112, 1090, 1108, 1114, 1118, 1136, 1145,
     1157, 1161, 1155, 1176, 1163, 1193, 1169, 1200, 1206, 1207,
     1225, 1213, 1201, 1246, 1237, 1262, 1245,  156,  992, 1014,
     1031,    0,    0, 1046, 1056,    0, 1120, 1095,    0, 1138,

     1203,    0, 1162, 1264, 1257, 1219, 1253, 1262, 1268, 1258,
     1266,    0, 1265, 1282, 1273,    0,    0,    0,    0, 1279,
        0, 1287,    0,    0, 1292,  147, 1292, 1297, 1298, 1304,
     1306, 1308, 1312, 1319, 1344, 1349, 1350, 1355, 1351, 1357,
     1371, 1392, 1390, 1401, 1365, 1407, 1408, 1402, 1417, 1403,
     1435, 1452, 1442, 1444, 1448, 1450, 1454, 1460, 1456, 1496,
     1462, 1469, 1501,    0,    0, 1349,    0, 1319, 1361,    0,
     1446, 1418, 1468, 1499, 1502,    0, 1497, 1492, 1512, 1515,
     1519, 1508, 1519, 1506, 1519,    0,    0, 1517, 1528, 1535,
     1553, 1542, 1543, 1547, 1548, 1549, 1563, 1581, 1595, 1596,

     1590, 1591, 1597, 1611, 1639, 1643, 1609, 1644, 1645, 1659,
     1651, 1655, 1689, 1627,    0, 1573, 1643, 1640, 1645, 1646,
     1677, 1673, 1671,    0, 1676, 1684,    0,    0,    0,    0,
     1686, 1694, 1695, 1703, 1711, 1730, 1716, 1696, 1748, 1738,
     1744, 1746, 1752, 1780, 1760, 1765, 1782, 1787, 1792,    0,
     1702,    0, 1710, 1727,    0, 1772,    0, 1746, 1768,    0,
        0, 1793, 1800, 1799, 1801, 1807, 1812, 1831, 1814, 1842,
     1832, 1848, 1849,    0,    0, 1832, 1832, 1848, 1862, 1856,
     1862, 1864, 1896, 1898, 1903, 1867,    0,    0,    0, 1883,
     1876, 1904, 1908, 1879, 1915, 1878, 1928, 1912, 1935, 1917,

     1942,    0, 1948, 2065, 2014,  152, 2021, 2028, 2031, 2037,
     2043, 2050, 2057
    } ;

static const flex_int16_t yy_def[514] =
    {   0,
      504,    1,  504,    3,  504,  504,  504,  504,  504,  505,
      504,  506,  507,  504,  504,  504,  508,  504,  504,  504,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      504,  510,  510,  510,  510,  511,  510,  510,  512,  510,
      510,  510,  510,  513,  510,  510,  510,  504,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,  510,  504,  505,
      506,  507,  504,  506,  508,  504,  504,  508,  504,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  510,  511,  510,  512,  510,  510,
      510,  513,  510,  510,  513,  510,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,  504,  504,  508,  504,  504,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  510,
      510,  513,  510,  510,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,  504,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  510,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  509,  509,  509,  509,  509,  509,   58,
       58,   58,   58,   58,   58,  509,  509,  509,  509,   58,
       58,   58,   58,  509,   58,  509,   58,  509,   58,  509,

       58,  509,   58,    0,  504,  504,  504,  504,  504,  504,
      504,  504,  504
    } ;

static const flex_int16_t yy_nxt[2141] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   11,
       11,   15,   11,   15,   16,   11,   17,   18,   11,   19,
       11,   20,   11,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   28,   28,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   28,   28,   11,   11,   11,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   28,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   28,   28,   41,    6,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   47,   51,   52,   47,   52,   53,
       47,   54,   55,   47,   56,   47,   57,   47,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   65,   65,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       65,   65,   47,   47,   47,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   65,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   65,   65,   78,   79,
       84,   88,   86,   86,   91,   93,   81,   92,   98,   95,
       85,  107,   89,  326,   99,   94,   96,  141,  100,  113,
      101,  135,  288,   97,  111,  121,  244,  142,  135,  102,
       91,  326,   93,   92,  103,   98,   95,  107,  112,   89,
       99,   94,  104,   96,  100,  113,  101,  240,  105,   97,

      108,  111,  121,  106,  114,  102,  241,  109,  110,   88,
      115,  103,  116,  130,  112,  197,  119,  143,  143,  104,
       89,  122,  196,  117,  105,  118,  128,  108,  198,  106,
      129,  114,  120,  109,  110,  123,  115,  124,  199,  116,
      130,   80,  197,  119,  125,   82,  126,   89,  122,  117,
      200,  118,  128,  127,  198,  201,  129,  202,  120,  131,
      132,  123,  207,  135,  124,  199,  133,   80,  134,  195,
      125,  195,  126,  150,  196,  203,  200,  145,  288,  127,
      193,  201,  147,  151,  202,  147,  131,  132,  146,  207,
      147,  155,  133,  147,  134,  137,  147,  156,  204,  147,

      150,  203,  137,  137,  137,  137,  137,  137,  147,  151,
      241,  147,  243,  193,  243,  146,  147,  244,  155,  147,
      192,  192,  147,  156,  204,  147,  143,  143,  143,  137,
      137,  137,  137,  137,  137,   87,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  147,  135,  135,  135,  135,  135,  135,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  148,  147,  147,  149,  147,  147,  147,  147,
      147,  147,  147,  135,  135,  135,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  148,  147,

      147,  149,  147,  147,  147,  147,  147,  147,  147,  135,
      152,  140,  147,  164,  157,  147,  158,  153,  240,  147,
      168,  165,  139,  147,  154,  159,  147,   86,  166,  167,
      205,  206,  147,  147,  169,   86,  147,  152,  147,  164,
      157,  147,  158,   86,  153,  147,   83,  168,  165,  147,
      154,  159,  147,  160,  166,  167,  205,  206,  147,  147,
      169,  161,  147,  504,  504,  504,  147,  162,  194,  147,
      147,  170,  163,  147,  176,  504,  171,  216,  173,   89,
      160,  147,  172,  504,  147,   82,  147,  147,  161,  174,
      177,  175,  147,  162,  208,  147,  147,  170,  163,  147,

      504,  176,  178,  171,  216,  173,   89,  147,  172,  179,
      147,  147,  147,  147,  147,  174,  177,  175,  147,  181,
      208,  147,  504,  180,  209,  147,  182,  185,  183,  178,
      147,  186,  187,  504,  210,  184,  179,  147,  504,  211,
      147,  212,  213,  504,  147,  147,  181,  147,  147,  180,
      209,  147,  182,  185,  183,  214,  147,  186,  215,  187,
      210,  184,  217,  188,  189,  211,  218,  212,  213,  147,
      190,  147,  191,  219,  147,  220,  221,  222,  504,  223,
      227,  214,  228,  229,  215,  224,  234,  225,  217,  230,
      188,  189,  231,  218,  235,  147,  190,  232,  191,  219,

      226,  220,  236,  221,  222,  223,  227,  233,  228,  237,
      229,  238,  224,  234,  225,  230,  239,  135,  231,  147,
      235,  291,  147,  194,  232,  135,  226,  504,  504,  236,
      289,  145,  293,  233,   89,  237,  245,  238,  147,  242,
      294,  246,  146,  239,  137,  147,  147,  291,  147,  147,
      146,  137,  137,  137,  137,  137,  137,  289,  293,  147,
      248,   89,  147,  245,  147,  504,  294,  246,  504,  146,
      504,  504,  147,  251,  250,  147,  147,  146,  137,  137,
      137,  137,  137,  137,  137,  147,  248,  147,  147,   87,
      147,  137,  137,  137,  137,  137,  137,   87,  247,  251,

      147,  250,  147,  147,  249,  147,  504,  147,  147,  147,
      147,  504,  147,  147,  252,  504,  147,  253,  137,  137,
      137,  137,  137,  137,  147,  247,  147,  147,  254,  147,
      249,  147,  255,  147,  147,  147,  147,  290,  147,  295,
      252,  147,  147,  253,  147,  147,  256,  257,  147,  147,
      147,  259,  147,  147,  254,  258,  298,  147,  260,  255,
      147,  147,  504,  147,  290,  295,  147,  147,  147,  504,
      147,  147,  256,  257,  147,  147,  265,  259,  147,  147,
      292,  258,  298,  147,  260,  147,  147,  147,  147,  147,
      261,  147,  147,  262,  147,  147,  266,  504,  147,  504,

      263,  504,  265,  264,  504,  147,  147,  292,  267,  147,
      147,  147,  504,  147,  147,  147,  261,  147,  147,  262,
      147,  147,  147,  266,  147,  147,  263,  268,  147,  300,
      264,  147,  147,  296,  267,  147,  147,  147,  297,  147,
      147,  147,  299,  269,  147,  270,  301,  504,  147,  147,
      504,  147,  147,  268,  147,  300,  147,  147,  504,  147,
      296,  147,  271,  147,  147,  297,  147,  504,  504,  299,
      269,  147,  270,  301,  147,  147,  275,  302,  147,  272,
      504,  273,  147,  147,  277,  147,  276,  147,  271,  504,
      147,  504,  147,  147,  274,  147,  147,  147,  147,  504,

      147,  147,  275,  302,  147,  304,  272,  147,  273,  147,
      278,  277,  276,  147,  504,  279,  147,  282,  147,  147,
      274,  147,  147,  303,  147,  147,  147,  147,  283,  147,
      147,  147,  304,  147,  286,  280,  278,  504,  305,  147,
      147,  279,  147,  147,  282,  281,  306,  307,  284,  303,
      308,  147,  147,  147,  283,  147,  147,  147,  147,  287,
      286,  147,  280,  285,  147,  305,  147,  147,  309,  147,
      311,  281,  310,  306,  307,  284,  308,  313,  312,  147,
      314,  315,  147,  316,  147,  317,  287,  147,  318,  285,
      147,  319,  320,  147,  321,  309,  322,  311,  323,  310,

      324,  504,  325,  313,  312,  327,  504,  314,  315,  316,
      135,  147,  317,  147,  147,  318,  331,  319,  147,  320,
      321,  147,  322,  504,  242,  323,  328,  324,  325,  504,
      147,  147,  327,  147,  147,  146,  330,  147,  364,  147,
      147,  329,  331,  147,  147,  147,  147,  147,  147,  333,
      365,  147,  147,  328,  147,  332,  147,  147,  366,  147,
      147,  334,  146,  330,  364,  147,  504,  329,  147,  147,
      147,  147,  147,  147,  147,  333,  365,  147,  147,  504,
      147,  332,   87,  335,  504,  366,  147,  367,  334,  147,
      336,  147,  147,  337,  147,  147,  147,  368,  147,  147,

      504,  147,  147,  339,  504,  147,  338,  504,  147,  340,
      335,  147,  147,  367,  147,  147,  336,  147,  147,  344,
      337,  147,  370,  368,  147,  504,  147,  147,  147,  147,
      339,  147,  338,  342,  147,  340,  341,  147,  147,  343,
      147,  147,  147,  147,  147,  147,  344,  147,  147,  370,
      147,  147,  147,  147,  147,  147,  504,  147,  504,  369,
      342,  371,  341,  345,  147,  504,  343,  147,  147,  504,
      147,  147,  147,  147,  147,  147,  147,  147,  346,  147,
      147,  147,  347,  147,  147,  369,  348,  349,  371,  373,
      345,  147,  351,  147,  147,  350,  147,  147,  147,  147,

      147,  147,  147,  352,  346,  354,  504,  147,  147,  347,
      147,  504,  147,  348,  349,  147,  373,  147,  351,  147,
      147,  350,  147,  147,  353,  147,  147,  355,  147,  147,
      352,  354,  147,  356,  147,  504,  147,  147,  147,  147,
      147,  147,  147,  147,  372,  147,  147,  504,  357,  147,
      377,  353,  147,  359,  355,  147,  358,  504,  147,  504,
      356,  147,  147,  147,  147,  147,  147,  361,  147,  147,
      372,  147,  147,  147,  357,  147,  147,  377,  147,  359,
      360,  147,  147,  358,  147,  147,  363,  147,  362,  379,
      147,  376,  378,  374,  361,  380,  504,  381,  147,  147,

      382,  147,  147,  375,  383,  384,  360,  147,  147,  385,
      147,  147,  363,  386,  387,  362,  379,  376,  378,  388,
      374,  504,  380,  381,  147,  391,  382,  147,  147,  375,
      383,  147,  384,  390,  147,  385,  147,  147,  389,  386,
      147,  387,  147,  147,  147,  147,  388,  147,  147,  392,
      504,  147,  391,  393,  147,  147,  415,  147,  147,  390,
      147,  504,  147,  147,  389,  504,  147,  504,  147,  147,
      147,  147,  414,  147,  147,  392,  395,  147,  396,  393,
      147,  147,  415,  394,  147,  147,  147,  147,  147,  147,
      147,  147,  397,  147,  147,  504,  147,  416,  398,  414,

      504,  147,  504,  395,  403,  396,  147,  147,  504,  394,
      147,  147,  147,  147,  147,  147,  147,  147,  397,  147,
      147,  399,  147,  416,  401,  398,  147,  147,  147,  147,
      403,  400,  402,  147,  404,  405,  147,  147,  147,  147,
      147,  406,  147,  147,  147,  504,  147,  147,  399,  418,
      401,  407,  147,  147,  147,  147,  147,  400,  504,  402,
      504,  404,  405,  147,  147,  147,  147,  406,  147,  147,
      147,  147,  147,  147,  408,  409,  418,  407,  410,  147,
      147,  147,  147,  147,  147,  417,  147,  147,  147,  147,
      147,  147,  147,  147,  411,  147,  147,  147,  147,  147,

      408,  147,  409,  419,  410,  147,  147,  147,  147,  147,
      147,  417,  147,  147,  147,  147,  147,  147,  147,  147,
      411,  147,  147,  412,  147,  147,  420,  147,  413,  419,
      421,  147,  147,  422,  147,  147,  423,  147,  424,  504,
      147,  425,  426,  504,  427,  428,  504,  429,  430,  504,
      412,  431,  504,  420,  504,  413,  504,  421,  147,  422,
      504,  147,  423,  147,  147,  424,  147,  147,  425,  426,
      427,  147,  428,  429,  147,  430,  432,  431,  147,  147,
      433,  147,  147,  434,  147,  147,  147,  147,  435,  147,
      147,  504,  147,  147,  436,  504,  451,  147,  504,  147,

      147,  504,  147,  432,  147,  147,  433,  147,  147,  434,
      147,  147,  147,  147,  435,  147,  437,  147,  147,  504,
      147,  436,  438,  451,  439,  147,  147,  440,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  442,  504,  504,
      504,  441,  437,  147,  504,  445,  147,  147,  147,  438,
      147,  439,  147,  440,  504,  147,  147,  147,  147,  147,
      147,  147,  147,  450,  442,  443,  444,  441,  504,  452,
      446,  445,  454,  147,  147,  147,  147,  453,  147,  147,
      147,  147,  147,  147,  147,  455,  447,  147,  448,  450,
      147,  147,  443,  444,  147,  147,  452,  446,  147,  454,

      456,  147,  458,  453,  147,  147,  147,  147,  147,  147,
      147,  455,  447,  147,  457,  448,  147,  147,  459,  460,
      147,  147,  461,  449,  147,  147,  463,  456,  147,  458,
      462,  147,  147,  147,  147,  467,  474,  464,  504,  147,
      457,  504,  147,  466,  459,  460,  475,  147,  461,  449,
      147,  147,  147,  463,  147,  147,  462,  147,  147,  147,
      147,  467,  474,  476,  464,  147,  147,  465,  147,  147,
      466,  468,  475,  147,  147,  470,  147,  147,  147,  469,
      147,  147,  147,  147,  147,  147,  478,  147,  147,  476,
      504,  147,  147,  465,  471,  147,  147,  477,  468,  147,

      147,  147,  470,  147,  147,  469,  147,  479,  147,  147,
      147,  147,  478,  147,  147,  472,  147,  147,  147,  147,
      471,  147,  147,  147,  477,  147,  147,  147,  473,  147,
      147,  147,  147,  479,  480,  147,  147,  481,  147,  147,
      147,  472,  147,  482,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  473,  147,  483,  147,  147,  487,
      480,  147,  147,  481,  147,  147,  147,  147,  147,  482,
      147,  485,  147,  486,  147,  488,  147,  147,  147,  147,
      504,  147,  484,  483,  147,  147,  487,  147,  147,  489,
      494,  504,  147,  147,  147,  147,  147,  485,  147,  486,

      147,  147,  488,  147,  147,  490,  495,  147,  484,  498,
      147,  147,  147,  147,  147,  147,  489,  494,  147,  147,
      496,  147,  147,  491,  147,  492,  147,  147,  504,  147,
      493,  490,  147,  495,  147,  147,  498,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  496,  147,  147,  500,
      491,  147,  492,  502,  147,  504,  497,  493,  147,  499,
      147,  147,  504,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  501,  147,  147,  500,  504,  147,  503,  502,
      147,  147,  497,  504,  147,  504,  499,  147,  504,  504,
      147,  504,  504,  147,  504,  504,  504,  147,  501,  504,

      147,  504,  504,  504,  503,  504,  504,  147,  504,  504,
      147,  504,  504,  147,   80,   80,  504,   80,   80,   80,
       80,   82,   82,   82,  504,   82,   82,   82,   87,  504,
       87,   87,   87,   87,   87,   90,   90,  135,  135,  135,
      135,  135,  135,  136,  136,  136,  136,  136,  136,  136,
      138,  138,  138,  138,  138,  138,  138,  144,  144,  144,
      144,  144,  144,  144,    5,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,

      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504
    } ;

static const flex_int16_t yy_chk[2141] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       15,   17,   19,   19,   21,   22,  506,   21,   24,   23,
       15,   27,   17,  326,   24,   22,   23,   52,   25,   31,
       25,   46,  288,   23,   30,   35,  244,   52,   49,   25,
       21,  243,   22,   21,   26,   24,   23,   27,   30,   17,
       24,   22,   26,   23,   25,   31,   25,  136,   26,   23,

       29,   30,   35,   26,   32,   25,  241,   29,   29,   85,
       32,   26,   33,   39,   30,   91,   34,   56,   56,   26,
       85,   36,  196,   33,   26,   33,   38,   29,   92,   26,
       38,   32,   34,   29,   29,   36,   32,   37,   93,   33,
       39,   46,   91,   34,   37,   49,   37,   85,   36,   33,
       94,   33,   38,   37,   92,   95,   38,   96,   34,   40,
       40,   36,  101,   54,   37,   93,   40,  136,   40,   89,
       37,   89,   37,   59,   89,   97,   94,   54,  195,   37,
      193,   95,   59,   59,   96,   59,   40,   40,   54,  101,
       65,   61,   40,   65,   40,   48,   61,   61,   98,   61,

       59,   97,   48,   48,   48,   48,   48,   48,   59,   59,
      144,   59,  146,   87,  146,   54,   65,  146,   61,   65,
       82,   80,   61,   61,   98,   61,   57,   55,   53,   48,
       48,   48,   48,   48,   48,   54,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       60,   51,   64,   64,   62,   64,   62,   60,  138,   62,
       67,   66,   50,   60,   60,   62,   60,   20,   66,   66,
       99,  100,   66,   67,   67,   18,   67,   60,   64,   64,
       62,   64,   62,   16,   60,   62,   14,   67,   66,   60,
       60,   62,   60,   63,   66,   66,   99,  100,   66,   67,
       67,   63,   67,    5,    0,    0,   63,   63,   88,   63,
       68,   68,   63,   68,   71,    0,   69,  111,   70,   88,
       63,   69,   69,    0,   69,  138,   70,   71,   63,   70,
       71,   70,   63,   63,  102,   63,   68,   68,   63,   68,

        0,   71,   72,   69,  111,   70,   88,   69,   69,   73,
       69,   72,   70,   71,   72,   70,   71,   70,   73,   74,
      102,   73,    0,   73,  103,   74,   74,   75,   74,   72,
       75,   75,   76,    0,  104,   74,   73,   72,    0,  105,
       72,  106,  107,    0,   73,   76,   74,   73,   76,   73,
      103,   74,   74,   75,   74,  109,   75,   75,  110,   76,
      104,   74,  112,   77,   77,  105,  113,  106,  107,   77,
       77,   76,   77,  114,   76,  115,  118,  119,    0,  120,
      122,  109,  123,  124,  110,  121,  129,  121,  112,  126,
       77,   77,  127,  113,  130,   77,   77,  128,   77,  114,

      121,  115,  131,  118,  119,  120,  122,  128,  123,  132,
      124,  133,  121,  129,  121,  126,  134,  142,  127,  147,
      130,  200,  147,  194,  128,  145,  121,    0,    0,  131,
      198,  142,  202,  128,  194,  132,  148,  133,  149,  145,
      203,  149,  142,  134,  137,  147,  148,  200,  147,  148,
      145,  137,  137,  137,  137,  137,  137,  198,  202,  151,
      151,  194,  151,  148,  149,    0,  203,  149,    0,  142,
        0,    0,  148,  154,  153,  148,  154,  145,  137,  137,
      137,  137,  137,  137,  141,  151,  151,  153,  151,  142,
      153,  141,  141,  141,  141,  141,  141,  145,  150,  154,

      152,  153,  154,  152,  152,  150,    0,  155,  150,  156,
      155,    0,  156,  153,  155,    0,  153,  156,  141,  141,
      141,  141,  141,  141,  157,  150,  152,  157,  157,  152,
      152,  150,  158,  155,  150,  156,  155,  199,  156,  205,
      155,  159,  158,  156,  159,  158,  159,  160,  162,  160,
      157,  162,  160,  157,  157,  161,  209,  161,  163,  158,
      161,  163,    0,  165,  199,  205,  165,  159,  158,    0,
      159,  158,  159,  160,  162,  160,  169,  162,  160,  169,
      201,  161,  209,  161,  163,  164,  161,  163,  164,  165,
      164,  166,  165,  166,  166,  167,  170,    0,  167,    0,

      167,    0,  169,  168,    0,  169,  170,  201,  171,  170,
      171,  164,    0,  171,  164,  168,  164,  166,  168,  166,
      166,  167,  172,  170,  167,  172,  167,  172,  173,  211,
      168,  173,  170,  206,  171,  170,  171,  174,  208,  171,
      174,  168,  210,  175,  168,  176,  212,    0,  172,  175,
        0,  172,  175,  172,  173,  211,  176,  173,    0,  176,
      206,  177,  177,  174,  177,  208,  174,    0,    0,  210,
      175,  179,  176,  212,  179,  175,  179,  213,  175,  178,
        0,  178,  176,  180,  181,  176,  180,  177,  177,    0,
      177,    0,  178,  181,  178,  178,  181,  179,  182,    0,

      179,  182,  179,  213,  183,  215,  178,  183,  178,  180,
      183,  181,  180,  184,    0,  184,  184,  186,  178,  181,
      178,  178,  181,  214,  182,  187,  186,  182,  187,  186,
      183,  190,  215,  183,  190,  185,  183,    0,  216,  184,
      185,  184,  184,  185,  186,  185,  217,  221,  188,  214,
      222,  187,  186,  188,  187,  186,  188,  190,  189,  191,
      190,  189,  185,  189,  191,  216,  185,  191,  223,  185,
      224,  185,  223,  217,  221,  188,  222,  225,  224,  188,
      226,  228,  188,  229,  189,  230,  191,  189,  231,  189,
      191,  232,  233,  191,  234,  223,  236,  224,  237,  223,

      238,    0,  239,  225,  224,  246,    0,  226,  228,  229,
      242,  245,  230,  250,  245,  231,  250,  232,  246,  233,
      234,  246,  236,    0,  242,  237,  247,  238,  239,    0,
      252,  247,  246,  252,  247,  242,  249,  245,  289,  250,
      245,  248,  250,  248,  246,  249,  248,  246,  249,  253,
      290,  251,  253,  247,  251,  251,  252,  247,  291,  252,
      247,  254,  242,  249,  289,  255,    0,  248,  255,  248,
      254,  249,  248,  254,  249,  253,  290,  251,  253,    0,
      251,  251,  242,  256,    0,  291,  257,  294,  254,  257,
      257,  255,  256,  258,  255,  256,  254,  295,  259,  254,

        0,  259,  258,  260,    0,  258,  259,    0,  261,  261,
      256,  261,  257,  294,  260,  257,  257,  260,  256,  265,
      258,  256,  298,  295,  259,    0,  265,  259,  258,  265,
      260,  258,  259,  263,  261,  261,  262,  261,  262,  264,
      260,  262,  263,  260,  266,  263,  265,  266,  264,  298,
      267,  264,  265,  267,  268,  265,    0,  268,    0,  297,
      263,  300,  262,  269,  262,    0,  264,  262,  263,    0,
      266,  263,  269,  266,  264,  269,  267,  264,  270,  267,
      268,  270,  271,  268,  270,  297,  271,  272,  300,  303,
      269,  273,  273,  271,  273,  272,  271,  272,  269,  275,

      272,  269,  275,  274,  270,  277,    0,  270,  277,  271,
      270,    0,  274,  271,  272,  274,  303,  273,  273,  271,
      273,  272,  271,  272,  276,  275,  272,  278,  275,  276,
      274,  277,  276,  279,  277,    0,  278,  283,  274,  278,
      283,  274,  279,  280,  301,  279,  280,    0,  280,  282,
      306,  276,  282,  282,  278,  276,  281,    0,  276,    0,
      279,  281,  278,  283,  281,  278,  283,  285,  279,  280,
      301,  279,  280,  285,  280,  282,  285,  306,  282,  282,
      284,  287,  284,  281,  287,  284,  287,  281,  286,  308,
      281,  305,  307,  304,  285,  309,    0,  310,  286,  285,

      311,  286,  285,  304,  313,  314,  284,  287,  284,  315,
      287,  284,  287,  320,  322,  286,  308,  305,  307,  325,
      304,    0,  309,  310,  286,  329,  311,  286,  327,  304,
      313,  327,  314,  328,  329,  315,  328,  329,  327,  320,
      330,  322,  331,  330,  332,  331,  325,  332,  333,  332,
        0,  333,  329,  333,  327,  334,  368,  327,  334,  328,
      329,    0,  328,  329,  327,    0,  330,    0,  331,  330,
      332,  331,  366,  332,  333,  332,  336,  333,  338,  333,
      335,  334,  368,  335,  334,  336,  337,  339,  336,  337,
      339,  338,  339,  340,  338,    0,  340,  369,  341,  366,

        0,  345,    0,  336,  345,  338,  335,  341,    0,  335,
      341,  336,  337,  339,  336,  337,  339,  338,  339,  340,
      338,  342,  340,  369,  343,  341,  343,  345,  342,  343,
      345,  342,  344,  341,  346,  347,  341,  344,  348,  350,
      344,  348,  350,  346,  347,    0,  346,  347,  342,  372,
      343,  349,  343,  349,  342,  343,  349,  342,    0,  344,
        0,  346,  347,  344,  348,  350,  344,  348,  350,  346,
      347,  351,  346,  347,  351,  352,  372,  349,  353,  349,
      354,  353,  349,  354,  355,  371,  356,  355,  352,  356,
      357,  352,  359,  357,  358,  359,  358,  351,  361,  358,

      351,  361,  352,  373,  353,  362,  354,  353,  362,  354,
      355,  371,  356,  355,  352,  356,  357,  352,  359,  357,
      358,  359,  358,  360,  361,  358,  374,  361,  363,  373,
      375,  362,  360,  377,  362,  360,  378,  363,  379,    0,
      363,  380,  381,    0,  382,  383,    0,  384,  385,    0,
      360,  388,    0,  374,    0,  363,    0,  375,  360,  377,
        0,  360,  378,  363,  389,  379,  363,  389,  380,  381,
      382,  390,  383,  384,  390,  385,  391,  388,  392,  393,
      393,  392,  393,  394,  395,  396,  394,  395,  396,  391,
      389,    0,  391,  389,  397,    0,  416,  390,    0,  397,

      390,    0,  397,  391,  392,  393,  393,  392,  393,  394,
      395,  396,  394,  395,  396,  391,  398,  398,  391,    0,
      398,  397,  399,  416,  400,  397,  401,  402,  397,  401,
      402,  399,  400,  403,  399,  400,  403,  404,    0,    0,
        0,  403,  398,  398,    0,  407,  398,  404,  407,  399,
      404,  400,  401,  402,    0,  401,  402,  399,  400,  403,
      399,  400,  403,  414,  404,  405,  406,  403,    0,  417,
      408,  407,  419,  404,  407,  405,  404,  418,  405,  406,
      408,  409,  406,  408,  409,  420,  409,  411,  410,  414,
      411,  412,  405,  406,  412,  410,  417,  408,  410,  419,

      421,  405,  423,  418,  405,  406,  408,  409,  406,  408,
      409,  420,  409,  411,  422,  410,  411,  412,  425,  426,
      412,  410,  431,  413,  410,  413,  434,  421,  413,  423,
      432,  433,  438,  432,  433,  438,  451,  435,    0,  434,
      422,    0,  434,  437,  425,  426,  453,  435,  431,  413,
      435,  413,  437,  434,  413,  437,  432,  433,  438,  432,
      433,  438,  451,  454,  435,  434,  436,  436,  434,  436,
      437,  439,  453,  435,  440,  441,  435,  440,  437,  440,
      441,  437,  442,  441,  439,  442,  458,  439,  443,  454,
        0,  443,  436,  436,  443,  436,  445,  456,  439,  445,

      440,  446,  441,  440,  446,  440,  441,  459,  442,  441,
      439,  442,  458,  439,  443,  444,  444,  443,  447,  444,
      443,  447,  445,  448,  456,  445,  448,  446,  449,  462,
      446,  449,  462,  459,  463,  464,  463,  465,  464,  463,
      465,  444,  444,  466,  447,  444,  466,  447,  467,  448,
      469,  467,  448,  469,  449,  462,  468,  449,  462,  477,
      463,  464,  463,  465,  464,  463,  465,  468,  471,  466,
      468,  471,  466,  476,  467,  478,  469,  467,  470,  469,
        0,  470,  470,  468,  472,  473,  477,  472,  473,  479,
      486,    0,  480,  468,  471,  480,  468,  471,  481,  476,

      482,  481,  478,  482,  470,  482,  490,  470,  470,  496,
      472,  473,  491,  472,  473,  491,  479,  486,  480,  490,
      494,  480,  490,  483,  481,  484,  482,  481,    0,  482,
      485,  482,  483,  490,  484,  483,  496,  484,  491,  485,
      492,  491,  485,  492,  493,  490,  494,  493,  490,  498,
      483,  495,  484,  500,  495,    0,  495,  485,  483,  497,
      484,  483,    0,  484,  497,  485,  492,  497,  485,  492,
      493,  499,  499,  493,  499,  498,    0,  495,  501,  500,
      495,  501,  495,    0,  503,    0,  497,  503,    0,    0,
      497,    0,    0,  497,    0,    0,    0,  499,  499,    0,

      499,    0,    0,    0,  501,    0,    0,  501,    0,    0,
      503,    0,    0,  503,  505,  505,    0,  505,  505,  505,
      505,  507,  507,  507,    0,  507,  507,  507,  508,    0,
      508,  508,  508,  508,  508,  509,  509,  510,  510,  510,
      510,  510,  510,  511,  511,  511,  511,  511,  511,  511,
      512,  512,  512,  512,  512,  512,  512,  513,  513,  513,
      513,  513,  513,  513,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,

      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "main.l"
#line 3 "main.l"
#include <stdio.h>
#include <iostream>
#include <unordered_map> 
#include <string>
#include <fstream>
#pragma warning(disable: 4996 6385 6011 4267 4244 4013 4312 4005 6387 26451)

using namespace std;
unordered_map<string, int> simbolos;
unordered_map<string, int> numeros;
unordered_map<string, int> palabras_reservadas;
unordered_map<string, int> constantes_cadena;

int contador_tab = 0;
int contador_salto = 0;
int columna = 0;
void conteoColumnas(){columna += int(yyleng);}
#line 1105 "main.cpp"

#line 1107 "main.cpp"

#define INITIAL 0
#define comentario 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 50 "main.l"


#line 1328 "main.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 505 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2065 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 52 "main.l"
{
	if(palabras_reservadas.find(yytext) == palabras_reservadas.end())
		palabras_reservadas[yytext] = 1;
	else
		++palabras_reservadas.at(yytext);
	conteoColumnas();
	columna = columna - yyleng + 1;
	printf("(%d,%d) ES PALABRA RESERVADA: %s\n",yylineno, columna, yytext);
	columna = columna + yyleng -1;
	
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "main.l"
{
		conteoColumnas();		
		printf("(%d,%d) ESPACIO ENCONTRADO: %s\n",yylineno, columna, yytext);
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 68 "main.l"
{
			contador_salto++;
			conteoColumnas();
			printf("(%d,%d) Salto de linea numero %d encontrado: %s\n", columna, yylineno, contador_salto, yytext);
			columna = 0;
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "main.l"
{
			contador_tab++;
			conteoColumnas();
			columna = columna - yyleng + 1;
	
			printf("(%d,%d) Tabulador numero %d encontrado: %s\n", columna, yylineno, contador_tab, yytext);
			columna = columna + yyleng -1;
		}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 84 "main.l"
{
			conteoColumnas();
			columna = columna - yyleng + 1;
			printf("(%d,%d) ELEMENTO RECONOCIDO: %s\n",yylineno, columna, yytext);
			columna = columna + yyleng -1;
		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "main.l"
BEGIN(comentario);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 94 "main.l"
{
    BEGIN(INITIAL);   
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 98 "main.l"
{
	conteoColumnas();
	columna = columna - yyleng + 1;
	printf("(%d,%d) COMENTARIO: %s\n",yylineno, columna, yytext);
	columna = columna + yyleng -1;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "main.l"
{
  if (simbolos.find(yytext) == simbolos.end()){
    simbolos[yytext] = 1;
  }
  else{
    simbolos[yytext]++;
  }

	conteoColumnas();
	columna = columna - yyleng + 1;
	printf("(%d,%d) ES UN SIMBOLO: %s\n",yylineno, columna, yytext);
	columna = columna + yyleng -1;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "main.l"
{
  if (numeros.find(yytext) == numeros.end()){
    numeros[yytext] = 1;
  }
  else{
    numeros[yytext]++;
  }

	conteoColumnas();
	columna = columna - yyleng + 1;
	printf("(%d,%d) ES UN NUMERO: %s\n",yylineno, columna, yytext);
	columna = columna + yyleng -1;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 133 "main.l"
{
	if(constantes_cadena.find(yytext) == constantes_cadena.end())
		constantes_cadena[yytext] = 1;
	else
		++constantes_cadena.at(yytext);

	conteoColumnas();
	columna = columna - yyleng + 1;
	printf("(%d,%d) ES UNA CADENA: %s\n",yylineno, columna, yytext);
	columna = columna + yyleng -1;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 145 "main.l"
{
	conteoColumnas();
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "main.l"
ECHO;
	YY_BREAK
#line 1526 "main.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comentario):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 505 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 505 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 504);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 151 "main.l"


int main(int argc, char* argv[])
{
	if(argc > 1)
	{
		++argv;
		yyin = fopen(argv[0], "rt");
		
		if(!yyin)
		{
			printf("El archivo %s no puede ser abierto. Entrada tradicional.\n", argv[0]);
			yyin = stdin;
		}
	}
	else
	{
		yyin = stdin;
	}
	
	yylex();
	std::ofstream myfile;
	int i = 1;
	myfile.open ("palabras_reservadas.csv");
	for(auto it = palabras_reservadas.begin(); it != palabras_reservadas.end(); ++it)
	{
		
		myfile <<i++<<","<< it->first << "," << it->second << "\n";
	}
	myfile.close();

	myfile.open ("constantes_cadena.csv");
	i = 1;
	for(auto it = constantes_cadena.begin(); it != constantes_cadena.end(); ++it)
	{
		myfile <<i++<<","<< it->first << "," << it->second << "\n";
	}
	myfile.close();

	myfile.open ("simbolos.csv");
	i = 1;
	for(auto it = simbolos.begin(); it != simbolos.end(); ++it)
	{
		myfile <<i++<<","<< it->first << "," << it->second << "\n";
	}
	myfile.close();

	myfile.open ("numeros.csv");
	i = 1;
	for(auto it = numeros.begin(); it != numeros.end(); ++it)
	{
		myfile <<i++<<","<< it->first << "," << it->second << "\n";
	}
	myfile.close();

	return 0;
}
